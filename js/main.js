/***
 loadHeader() is used to load the header component into the page from the navbar.html file.
 */
function loadHeader() {
    fetch('/src/navbar.html')
        .then(response => response.text())
        .then(data => {
            document.getElementById('header').innerHTML = data;
        })
        .catch(error => console.error('Error loading the content of navbar', error));
}

/***
 loadFooter() is used to load the footer component into the page from the footer.html file.
 */
function loadFooter() {
    fetch('/src/footer.html')
        .then(response => response.text())
        .then(data => {
            document.getElementById('footer').innerHTML = data;
        })
        .catch(error => console.error('Error loading the content of footer', error));
}

/***
 loadContent(@page) is used to load the main component into the page from the dedicated .html file.
 @param page - the location where the main component html resides
 */
function loadContent(page) {
    fetch(page)
        .then(response => response.text())
        .then(data => {
            document.getElementById('content').innerHTML = data;
        })
        .catch(error => console.error('Error loading the content of ' + page, error));
}

/***
 Adding a DOMContentLoaded event listener to the document to ensure the subsequent function calls are called after
 the static html components are loaded. It also exposes multiple functions globally.
 */
document.addEventListener('DOMContentLoaded', () => {
    loadHeader();
    loadFooter();
    loadContent('/src/home.html');

    window.sendForm = sendForm;
    window.loadContent = loadContent;
    window.displayRepos = displayRepos;

})

/***
 sendForm() is used to send a form using the emailjs API. It validates the input fields of the form,
 then sends the form's content to the emailjs API using *my* public key, service id, and template id.
 Replace the public key, service id, and template id values with your own values which can be generated by visiting
 and registering to https://www.emailjs.com/
 */
function sendForm() {
    const name = document.getElementById('name').value;
    const email = document.getElementById('email').value;
    const message = document.getElementById('message').value;

    if (name === '') {
        alert("Please enter your name");
    }
    else if(email === '' || !email.includes("@") || !email.includes(".")) {
        alert("Please enter a valid email");
    }
    else if(message === '') {
        alert("Please enter your message");
    }
    else{
        event.preventDefault()
        emailjs.init('I6XAeZBxH6tn7Dqg3')

        const serviceID = 'service_dvofvzg';
        const templateID = 'template_1qbyhbf';

        emailjs.sendForm(serviceID, templateID, "#contact_form")
            .then(() => {
                alert('Sent!');
            }, (err) => {
                alert(JSON.stringify(err));
            });
    }
}

/***
 fetchGitHubRepos(@user_name) fetches the repositories of the passed user using the GitHub API.
 @param user_name - the name of the user whose repositories are going to be fetched
 */
async function fetchGitHubRepos(user_name) {
    const url = `https://api.github.com/users/${user_name}/repos`;
    const response = await fetch(url);
    console.log("Repos fetching!");
    if (response.ok) {
        console.log("Repos fetched!");
        return await response.json();
    } else {
        //document.getElementById('github_repo').textContent = `Error: ${response.statusText}`;
        console.log(`Repos fetching failed! ${response.status}`);
        return []
    }
}

/***
 fetchGitHubFileContent(url) fetches the file at the specified url and returns the download url or null.
 @param url - the url of the file to be fetched
 */
async function fetchGitHubRepoImage(url) {
    const response = await fetch(url);
    console.log("Repo Image fetching!")
    if (response.ok) {
        console.log("Repos Image fetched!");
        const data = await response.json();
        return data.download_url;
    }
    else
    {
        console.log("Repos Image fetching failed!")
        return null;
    }
}

/***
 displayRepos() populates a grid div element with the repositories of a GitHub user. For each repository
 a div element is created, to which an icon, title and button are added.
 */
async function displayRepos() {
    console.log("Displaying Repos!")
    console.log("Waiting for fetchGitHubRepos!");
    const repos = await fetchGitHubRepos('jipelski');
    const grid = document.getElementById('github_repo');
    console.log("No more waiting!");

    repos.forEach(repo => {
        const repoItem = document.createElement('div');
        repoItem.classList.add('repo_item');

        const repoImage = document.createElement('img');
        const url = `https://api.github.com/repos/jipelski/${repo.name}/contents/repoImage.jpg`;
        const repoImageUrl = fetchGitHubRepoImage(url)
        repoImage.src = repoImageUrl || '../res/images/default_repo_image';
        repoImage.alt = repo.name;
        repoImage.setAttribute('class', 'repo_image');

        const repoTitle = document.createElement('h2');
        repoTitle.textContent = repo.name;
        repoTitle.setAttribute('class', 'repo_title');

        const repoDescription = document.createElement('p');
        repoDescription.textContent = repo.description || 'A repository';
        repoDescription.setAttribute('class', 'repo_description');

        const repoButton = document.createElement('a');
        repoButton.classList.add('repo_button');
        repoButton.textContent = 'View Further';
        repoButton.setAttribute('class', 'repo_button')

        repoItem.appendChild(repoImage);
        repoItem.appendChild(repoTitle);
        repoItem.appendChild(repoDescription);
        repoItem.appendChild(repoButton);
        grid.appendChild(repoItem)
    })
}
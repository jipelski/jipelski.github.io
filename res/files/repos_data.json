{
    "data_stream": {
        "readme": "# Data Streaming Project\n\nThis repository contains the full stack application for streaming data using React (frontend), FastAPI (backend), and a gateway service to simulate data ingestion.\n\n## Docker Images\n\nThe Docker images for this project are available on Docker Hub.\n\n### Backend Service\n\nThe backend service is implemented using FastAPI.\n\n#### Pulling the Docker Image\n\nTo pull the backend Docker image, run the following command:\n\n```sh\ndocker pull jipelski/data-stream-backend:latest\n```\n\n#### Running the Docker Container\n\nTo run the backend Docker container, use the following command:\n\n```sh\ndocker run -d --name backend -p 8000:8000 jipelski/data-stream-backend:latest\n```\n\n### Frontend Service\n\nThe frontend service is implemented using React.\n\n#### Pulling the Docker Image\n\nTo pull the frontend Docker image, run the following command:\n\n```sh\ndocker pull jipelski/sensor_stream-frontend:latest\n```\n\n#### Running the Docker Container\n\nTo run the frontend Docker container, use the following command:\n\n```sh\ndocker run -d --name frontend -p 3000:3000 jipelski/data-stream-frontend:latest\n```\n\n### Gateway Service\n\nThe gateway service is used to simulate data ingestion.\n\n#### Pulling the Docker Image\n\nTo pull the gateway Docker image, run the following command:\n\n```sh\ndocker pull jipelski/data-stream-mock:latest\n```\n\n#### Running the Docker Container\n\nTo run the gateway Docker container, use the following command:\n\n```sh\ndocker run -d --name gateway jipelski/data-stream-mock:latest\n```\n\n## Running the Full Stack Application with Docker Compose\n\nTo run the full stack application using Docker Compose, follow these steps:\n\n1. Clone the repository:\n\n    ```sh\n    git clone https://github.com/jipelski/data_stream.git\n    ```\n\n2. Navigate to the project directory:\n\n    ```sh\n    cd data_stream\n    ```\n    \n3. Run Docker Compose to start all services:\n\n    ```sh\n    docker-compose up -d\n    ```\n\n## Development Setup\n\nTo set up the development environment locally, follow these steps:\n\n1. Clone the repository:\n\n    ```sh\n    git clone https://github.com/jipelski/data_stream.git\n    ```\n\n2. Navigate to the project directory:\n\n    ```sh\n    cd data_stream\n    ```\n\n3. Follow the instructions in each service's directory to set up the local environment.\n\n### Backend Service\n\nNavigate to the `backend` directory and set up the Python environment:\n\n```sh\ncd backend\npython -m venv venv\nsource venv/bin/activate  # On Windows use `venv\\Scripts\\activate`\npip install -r requirements.txt\nuvicorn main:app --host 0.0.0.0 --port 8000\n```\n\n### Frontend Service\n\nNavigate to the `frontend` directory and set up the React environment:\n\n```sh\ncd frontend\nnpm install\nnpm start\n```\n\n### Gateway Service\n\nNavigate to the `gateway` directory and set up the Python environment:\n\n```sh\ncd gateway\npython -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\npython mock_gateway.py\n```\n",
        "image": null,
        "description": "A data stream full stack app using FastAPI, Python and JavaScript.",
        "language": "Python",
        "name": "data_stream"
    },
    "jipelski.github.io": {
        "readme": "# jipelski.github.io",
        "image": null,
        "description": "My personal website",
        "language": "JavaScript",
        "name": "jipelski.github.io"
    },
    "map_reader": {
        "readme": "Repo README not found",
        "image": null,
        "description": "A computer vision program that finds the position and orientation of a red triangle on a map which sits on a blue background.",
        "language": "Python",
        "name": "map_reader"
    },
    "merger-realm": {
        "readme": "Repo README not found",
        "image": null,
        "description": "An Android merger game ",
        "language": "Java",
        "name": "merger-realm"
    },
    "MultiplayerBallGame": {
        "readme": "Repo README not found",
        "image": null,
        "description": "A program that consists of a client-server ball game played in the command line.",
        "language": "Java",
        "name": "MultiplayerBallGame"
    },
    "PIDandFuzzyLogic": {
        "readme": "Repo README not found",
        "image": null,
        "description": "TurtleBot wall following and obstacle avoidance behaviour implementation.",
        "language": "Python",
        "name": "PIDandFuzzyLogic"
    },
    "TheMallIsClosed": {
        "readme": "Repo README not found",
        "image": null,
        "description": "A 2D game using java.",
        "language": "Java",
        "name": "TheMallIsClosed"
    }
}